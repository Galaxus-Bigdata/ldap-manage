import { toDataFrame } from '@grafana/data';

// Helper method to transform the API response data if needed
transformResponse(data) {
  const dataFrames = [];

  // Assuming your JSON response has a "metrics" property containing the data
  const metrics = data.metrics;

  for (const metric of metrics) {
    const target = metric.metricname; // Set the metric name as the target

    // Assuming each metric has a "metrics" property containing the data points
    const dataPoints = metric.metrics;

    const timeSeries = [];

    for (const timestamp in dataPoints) {
      const value = dataPoints[timestamp];

      // Convert the timestamp to milliseconds since epoch
      const epochTimestamp = parseInt(timestamp);

      // Create an object with "time" and "value" properties
      const point = {
        time: epochTimestamp,
        value: value,
      };

      // Add the data point to the time series
      timeSeries.push(point);
    }

    // Create a data frame using the time series array
    const dataFrame = toDataFrame({
      name: target,
      fields: [
        { name: 'time', type: 'time', values: timeSeries.map(point => point.time) },
        { name: 'value', type: 'number', values: timeSeries.map(point => point.value) },
      ],
    });

    // Add the data frame to the array of data frames
    dataFrames.push(dataFrame);
  }

  // Return the array of data frames
  return dataFrames;
}


