You can use the `xml.etree.ElementTree` module in Python to parse an XML file and get all the elements. Here's an example:
```
import xml.etree.ElementTree as ET

tree = ET.parse('your_xml_file.xml')
root = tree.getroot()

for elem in root.iter():
    print(elem.tag, elem.attrib)
```
This code will parse the XML file and iterate over all the elements in the document, printing their tag name and attributes.

Alternatively, you can use the `lxml` library, which provides a more powerful and flexible way of parsing and manipulating XML documents. Here's an example:
```
from lxml import etree

tree = etree.parse('your_xml_file.xml')
root = tree.getroot()

for elem in root.iter():
    print(elem.tag, elem.attrib)
```
Both of these examples will print all the elements in the XML document, along with their tag name and attributes.

If you want to get only the elements with a specific tag name, you can modify the code to use the `findall` method, like this:
```
for elem in root.findall('your_tag_name'):
    print(elem.tag, elem.attrib)
```
Replace `'your_tag_name'` with the actual tag name you're interested in.

Note that these examples assume that the XML file is well-formed and valid. If the file is not well-formed, you may need to use a more robust parsing library like `lxml` to handle errors and warnings.
